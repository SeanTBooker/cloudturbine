
subprojects {
	
	apply plugin: 'java'
	
    // Put shared resources in a common Third_Party directory
    repositories {
        flatDir {
            dirs "$rootProject.projectDir/Third_Party"
            // For those projects which depend on CTlib.jar, we also need to
            // tell them where to find commons-net-3.5, because they need to
            // access all the dependencies of CTlib.jar (the *transitive
            // dependencies* are also added to the classpath, i.e., the classes
            // that CTlib.jar depended upon for its build).
            // 2016-11-1 standard open source libraries (such as Apache commons
            //           and Jetty) are now fetched from Maven central
            // dirs "$rootProject.projectDir/Third_Party/commons-net-3.5"
            // dirs "$rootProject.projectDir/Third_Party/commons-cli-1.3.1"
        }
        // Some open source libraries (eg, Apache Commons and Jetty) will be
        // fetched from Maven Central
        mavenCentral()
    }
    
    //
    // Automatically execute clean before build
    // Also, have Javadoc built at the same time we run the build task
    //
    // This gets around a problem we had with making our "fat" JAR files;
    // namely, if there was a change in a dependency (in a CTlib file, for
    // instance) but no change in any source files of the current project, then
    // the JAR file wasn't being rebuilt.  To get around this, whenever a user
    // asks to do a "build" we force a "clean" to be executed first.
    //
    // NOTE: Include the line to specify that "clean" is run before
    //       "compileJava"; otherwise, what was happening is that the Java
    //       files would be compiled and then "clean" was run right before
    //       "build" - so the build directory was being deleted!  See Kunal's
    //       forum response at:
    //       http://stackoverflow.com/questions/17617791/gradle-task-to-call-other-tasks-in-order
    //
    build.dependsOn clean,javadoc
    compileJava.mustRunAfter clean
    
    // Copy the JAR file to a top level "Distribute" folder; do this last 
    // so we make sure to get the newly built JAR file
    build.doLast {
    	task -> println "Built $task.project.name"
    	String fromLoc = "${buildDir}/libs/" + project.name + ".jar"
    	String toLoc = "../Distribute"
    	copy {
    		from fromLoc
    		into toLoc
    	}
    }
    
    // Javadoc specifications
    javadoc {
        source = sourceSets.main.allJava
        destinationDir = new File("$rootDir/JavaDoc/" + project.name)
	    options.links("http://docs.oracle.com/javase/8/docs/api/");
	    // Exclude NanoHTTPD.java (used in CTserver project) for two reasons:
        //   1. It produces Javadoc errors (when using Java 8)
        //   2. We don't want to imply that we support NanoHTTPD.java, even
        //      though it is distributed with the CloudTurbine software
        exclude "**/NanoHTTPD.java"
	    // To include everything from private level and up in the documentation
	    // options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PRIVATE
    }
    
    // For each subproject clean, remove the JAR file and Javadoc folder
    clean.doFirst {
	    // Delete this project's JAR file from the Distribute folder
	    def jarObj = new File("$rootDir/Distribute/" + project.name + ".jar")
	    jarObj.delete()
        // Delete this project's Javadoc from the JavaDoc fodler
        def dirObj = new File("$rootDir/JavaDoc/" + project.name)
        dirObj.deleteDir()
    }
}

